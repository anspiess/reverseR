barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = 2)
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = 0)
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = 1)
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = 0.2)
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0.5, 0.5))
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0, 0.5))
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0, 1))
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0, 0))
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0, -1))
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0, -0.1))
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey60")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0, -0.2))
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey80")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0, -0.2))
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey40")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0, -0.2))
source('~/.active-rstudio-document')
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey40")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0, -0.15))
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey40")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS:rlm", "robustbase:lmrob",
"robust:lmRob"), fill = COL, inset = c(0, -0.2))
source('~/.active-rstudio-document')
RLM2
install.packages("complmrob")
library(complmrob)
RLM2
bootcoefs(RLM2)
summary(RLM2)
summary(bootcoefs(RLM2))
summary(bootcoefs(RLM2))$coefficients
names(summary(bootcoefs(RLM2)))
summary(bootcoefs(RLM2))$stats
summary(bootcoefs(RLM2))$stats[2, 3]
bootcoefs(RLM2)
summary(bootcoefs(RLM2))
summary(bootcoefs(RLM2))$stats
summary(bootcoefs(RLM2))$stats[2, 3]
summary(bootcoefs(RLM2))$stats[2, 3]
summary(bootcoefs(RLM2))$stats[2, 3]
summary(bootcoefs(RLM2))$stats[2, 3]
?bootcoefs
summary(bootcoefs(RLM2, R = 100))$stats[2, 3]
summary(bootcoefs(RLM2, R = 100))$stats[2, 3]
summary(bootcoefs(RLM2, R = 100))$stats[2, 3]
summary(bootcoefs(RLM2, R = 10000))$stats[2, 3]
summary(bootcoefs(RLM2, R = 10000))$stats[2, 3]
summary(bootcoefs(RLM2, R = 10000))$stats[2, 3]
summary(bootcoefs(RLM2, R = 10000, method = "residuals"))$stats[2, 3]
summary(bootcoefs(RLM2, R = 1000, method = "residuals"))$stats[2, 3]
summary(bootcoefs(RLM2, R = 1000, method = "residuals"))$stats[2, 3]
summary(bootcoefs(RLM2, R = 1000, method = "residuals"))$stats[2, 3]
summary(bootcoefs(RLM2, R = 1000, method = "residuals"))$stats[2, 3]
summary(bootcoefs(RLM2, R = 1000, method = "residuals"))$stats[2, 3]
summary(bootcoefs(RLM2, R = 1000, method = "residuals"))$stats[2, 3]
summary(bootcoefs(RLM2, R = 1000))$stats[2, 3]
summary(bootcoefs(RLM2, R = 1000))$stats[2, 3]
summary(bootcoefs(RLM2, R = 10000))$stats[2, 3]
summary(bootcoefs(RLM2, R = 100000))$stats[2, 3]
summary(bootcoefs(RLM2, R = 100000))$stats[2, 3]
source('~/.active-rstudio-document')
allP
barplot(t(allP), beside = TRUE, col = COL, log = "y")
COL <-  c("black", "red3", "blue", "darkgreen", "orange", "darkviolet")
allP <- cbind(origP = res$mat[, "origP"], looP = res$mat[, "looP"],
P1 = P1, P2 = P2, P3 = P3, P4 = P4)
COL <-  c("black", "red3", "blue", "darkgreen", "orange", "darkviolet")
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey40")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS", "robustbase", "robustbase boot"
"robust), fill = COL, inset = c(0, -0.2), bty = "n")
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey40")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS", "robustbase", "robustbase boot",
"robust), fill = COL, inset = c(0, -0.2), bty = "n")
barplot(t(allP), beside = TRUE, col = COL, log = "y")
par(xpd = FALSE)
abline(h = 0.05, lwd = 2, col = "grey40")
par(xpd = TRUE)
legend(x = "topleft", legend = c("lm", "lm w/o reverser", "MASS", "robustbase", "robustbase boot",
"robust"), fill = COL, inset = c(0, -0.2), bty = "n")
allP
install.packages(simpleboot)
install.packages("simpleboot")
summary(lm(Y ~ X))
lm.boot(lm(Y~X))
library(simpleboot)
lm.boot(lm(Y~X))
lm.boot(lm(Y~X), R = 1000)
summary(lm.boot(lm(Y~X), R = 1000))
bootfunc <- function(dataset, random) {
DAT <- dataset[random, ]
LM <- lm(Y ~ X, data = DAT)
SUM <- summary(LM)
PVAL <- SUM$coefficients[2, 4]
}
bootresults <- boot(data = cbind(X = X, Y = Y), statistic = bootfunc, R = 5000)
bootfunc <- function(dataset, random) {
DAT <- dataset[random, ]
LM <- lm(Y ~ X, data = DAT)
SUM <- summary(LM)
PVAL <- SUM$coefficients[2, 4]
}
bootresults <- boot(data = data.frame(X, Y), statistic = bootfunc, R = 5000)
bootresults
summary(lm(Y ~ X))
?boot
names(bootresults)
bootresults$t0
bootresults$t
bootresults$R
bootresults$statistic
bootresults <- boot(data = data.frame(X, Y), statistic = bootfunc, R = 5000)
bootresults
mean(bootresults$t0)
bootresults <- boot(data = data.frame(X, Y), statistic = bootfunc, R = 50)
mean(bootresults$t0)
bootfunc <- function(dataset, idx) {
DAT <- dataset[idx, ]
LM <- lm(Y ~ X, data = DAT)
SUM <- summary(LM)
PVAL <- SUM$coefficients[2, 4]
}
bootresults <- boot(data = data.frame(X, Y), statistic = bootfunc, R = 5000)
names(bootresults)
mean(bootresults$t)
sd(bootresults$t)
hist(bootresults$t)
hist(bootresults$t, breaks = 100)
hist(log10(bootresults$t), breaks = 100)
summary(lm(Y~X, data = DAT))
hist(bootresults$t, breaks = 100)
hist(log10(bootresults$t), breaks = 100)
abline(v = log10(0.05))
mean(log10(bootresults$t0))
mean(log10(bootresults$t))
exp(mean(log10(bootresults$t)))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
allP
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
summary(lm(Y~X))
mean(P5)
mean(BOOT$t0)
mean(BOOT$t)
mean(log(BOOT$t))
exp(mean(log(BOOT$t)))
mean(log(BOOT$t))
hist(log(BOOT$t))
hist(log(BOOT$t), breaks = 100)
hist(BOOT$t, breaks = 100)
mean(log(BOOT$t))
mean(BOOT$t)
median(BOOT$t)
?boot
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
BOOT$t
hist(BOOT$t, breaks = 100)
huber
`huber`
?huber
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
barplot(t(allP), beside = TRUE, col = COL, log = "y")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
SUM
table(MAR)
table(MAT)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(reverseR)
shinyInfl()
library(reverseR)
shinyInfl()
shinyInfl()
library(reverseR)
shinyInfl()
library(reverseR)
shinyInfl()
runApp('inst/reverseR')
runApp('inst/reverseR')
runApp('inst/reverseR')
runApp('inst/reverseR')
runApp('inst/reverseR')
runApp('inst/reverseR')
library(reverseR)
runApp('inst/reverseR')
runApp('inst/reverseR')
runApp('inst/reverseR')
runApp('inst/reverseR')
library(reverseR)
shinyInfl()
library(reverseR)
shinyInfl()
library(reverseR)
shinyInfl()
library(reverseR)
shinyInfl()
library(reverseR)
set.seed(123)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(20, 0, 1)
LM1 <- lm(b ~ a)
res1 <- lmMult(LM1)
multPlot(res1)
stability(res1)
set.seed(123)
a <- 1:100
b <- 5 + 0.08 * a + rnorm(100, 0, 5)
LM2 <- lm(b ~ a)
res2 <- lmMult(LM2, max = 20)
multPlot(res2)
stability(res2)
set.seed(123)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(20, 0, 1)
LM1 <- lm(b ~ a)
res1 <- lmMult(LM1)
multPlot(res1)
stability(res1)
library(reverseR)
?shinyInfl()
library(reverseR)
?shinyInfl()
shinyInfl()
?person
library(reverseR)
library(reverseR)
res1 <- lmExact(x = 1:20, ny = 1, intercept = 3, slope = 2, error = 2)
## Same as above, but with 3 replicates, sigma = 1,  n = 20.
res2 <- lmExact(x = 1:20, ny = 3, intercept = 3, slope = 2, error = 1)
## No replicates, intercept = 2 and p-value = 0.025, sigma = 3, n = 50.
## => slope = 0.063
res3 <- lmExact(x = 1:50, ny = 1, intercept = 2, pval = 0.025, error = 3)
## 5 replicates, intercept = 1, R-square = 0.85, sigma = 2, n = 10.
## => slope = 0.117
res4 <- lmExact(x = 1:10, ny = 5, intercept = 1, rsq = 0.85, error = 2)
## Heteroscedastic (magnitude-dependent) noise.
error <- sapply(1:20, function(x) rnorm(3, 0, x/10))
res5 <- lmExact(x = 1:20, ny = 3, intercept = 1, slope = 0.2,
error = error)
## Supply own x/y values, residuals are similar to an
## initial linear regression.
X <- c(1.05, 3, 5.2, 7.5, 10.2, 11.7)
set.seed(123)
Y <- 0.5 + 2 * X + rnorm(6, 0, 2)
res6 <- lmExact(x = X, y = Y, intercept = 1, slope = 0.2)
all.equal(residuals(lm(Y ~ X)), residuals(res6$lm))
set.seed(123)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(20, 0, 1)
LM1 <- lm(b ~ a)
res1 <- lmInfl(LM1)
lmPlot(res1)
pvalPlot(res1)
inflPlot(res1)
slsePlot(res1)
stability(res1)
set.seed(123)
a <- 1:100
b <- 5 + 0.08 * a + rnorm(100, 0, 5)
LM3 <- lm(b ~ a)
res3 <- lmInfl(LM3)
lmPlot(res3)
stability(res3)
set.seed(123)
a <- rep(1:20, each = 3)
b <- 5 + 0.08 * a + rnorm(20, 0, 2)
LM4 <- lm(b ~ a)
res4 <- lmInfl(LM4)
lmPlot(res4)
pvalPlot(res4)
inflPlot(res4)
slsePlot(res4)
stability(res4)
set.seed(123)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(20, 0, 1)
LM5 <- lm(b ~ a, weights = 1:20)
res5 <- lmInfl(LM5)
lmPlot(res5)
stability(res5)
set.seed(123)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(20, 0, 1)
LM1 <- lm(b ~ a)
res1 <- lmMult(LM1)
multPlot(res1)
stability(res1)
set.seed(123)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(20, 0, 1)
LM1 <- lm(b ~ a)
res1 <- lmMult(LM1)
multPlot(res1)
stability(res1)
set.seed(123)
a <- 1:100
b <- 5 + 0.08 * a + rnorm(100, 0, 5)
LM2 <- lm(b ~ a)
res2 <- lmMult(LM2, max = 20)
multPlot(res2)
stability(res2)
set.seed(125)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(length(a), 0, 1)
LM1 <- lm(b ~ a)
res1 <- lmThresh(LM1)
threshPlot(res1)
stability(res1)
set.seed(125)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(length(a), 0, 2)
LM2 <- lm(b ~ a)
res2 <- lmThresh(LM2)
threshPlot(res2)
stability(res2)
set.seed(125)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(length(a), 0, 1)
LM3 <- lm(b ~ a)
res3 <- lmThresh(LM3, newobs = TRUE)
threshPlot(res3)
stability(res3)
set.seed(125)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(length(a), 0, 1)
LM1 <- lm(b ~ a)
summary(LM1) # => p-value = 0.02688
res1 <- lmThresh(LM1, newobs = TRUE)
threshPlot(res1)
st <- stability(res1, pval = TRUE)
st$stats # => upper prediction boundary = 7.48
# and eosr = 6.49
stabPlot(st, 1)
## reverse significance if we add a new response y_1 = 7
a <- c(1, a)
b <- c(7, b)
LM2 <- lm(b ~ a)
summary(LM2) # => p-value = 0.0767
cat("Example files are in", system.file("shiny", package = "reverseR"))
res <- simInfl(x = 1:10, interecept = 0.5, slope = 0.02, error = 0.05, nrev = 100)
warnings()
res <- simInfl(x = 1:10, intercept = 0.5, slope = 0.02, error = 0.05, nrev = 100)
res <- simInfl(x = 1:10, intercept = 0.5, slope = 0.02, error = 0.05, nrev = 10)
## Plot Cook's D versus delta-P values
## and insert common cut-off.
plot(res$mat[, "cook.d"], res$mat[, "dP"], pch = 16, cex = 0.5,
xlab = "Cook's D", ylab = "delta-P")
thresh <- qf(0.5, 2, 8)  # threshold value for Qf(0.5, npar, df)
abline(v = thresh, col = "darkred", lwd = 2)
## Plot dfbeta slope versus delta-P values
## and insert common cut-off.
plot(res$mat[, "dfb.Slope"], res$mat[, "dP"], pch = 16, cex = 0.5,
xlab = "dfbeta Slope", ylab = "delta-P")
thresh <- 2/sqrt(10)  # 2/sqrt(N)
abline(v = thresh, col = "darkred", lwd = 2)
## Plot dffits versus delta-P values
## and insert common cut-off.
plot(abs(res$mat[, "dffit"]), res$mat[, "dP"], pch = 16, cex = 0.5,
xlab = "dffits", ylab = "delta-P")
thresh <- 2 * sqrt(2/10)  # 2 * sqrt(nPar/N)
abline(v = thresh, col = "darkred", lwd = 2)
res <- simInfl(x = 1:10, intercept = 0.5, slope = 0.02, error = 0.05, nrev = 100)
plot(res$mat[, "cook.d"], res$mat[, "dP"], pch = 16, cex = 0.5,
xlab = "Cook's D", ylab = "delta-P")
thresh <- qf(0.5, 2, 8)  # threshold value for Qf(0.5, npar, df)
abline(v = thresh, col = "darkred", lwd = 2)
res <- simInfl(x = 1:10, intercept = 0.5, slope = 0.02, error = 0.05, nrev = 200)
plot(res$mat[, "cook.d"], res$mat[, "dP"], pch = 16, cex = 0.5,
xlab = "Cook's D", ylab = "delta-P")
thresh <- qf(0.5, 2, 8)  # threshold value for Qf(0.5, npar, df)
abline(v = thresh, col = "darkred", lwd = 2)
set.seed(125)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(length(a), 0, 1)
LM1 <- lm(b ~ a)
res1 <- lmThresh(LM1, newobs = TRUE)
st1 <- stability(res1, pval = TRUE)
dt.scaled <- function(x, df, mu, s) 1/s * dt((x - mu)/s, df)
integrate(dt.scaled, lower = st1$stats[1, "lower"], st1$stats[1, "upper"],
df = 18, mu = st1$stats[1, "fitted"], s = st1$stats[1, "se"])
integrate(dt.scaled, lower = st1$stats[1, "eosr.2"], st1$stats[1, "upper"],
df = 18, mu = st1$stats[1, "fitted"], s = st1$stats[1, "se"])
set.seed(125)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(length(a), 0, 1)
LM1 <- lm(b ~ a)
res1 <- lmThresh(LM1, newobs = TRUE)
st1 <- stability(res1, pval = TRUE)
dt.scaled <- function(x, df, mu, s) 1/s * dt((x - mu)/s, df)
integrate(dt.scaled, lower = st1$stats[1, "lower"], st1$stats[1, "upper"],
df = 18, mu = st1$stats[1, "fitted"], s = st1$stats[1, "se"])
integrate(dt.scaled, lower = st1$stats[1, "eosr.2"], st1$stats[1, "upper"],
df = 18, mu = st1$stats[1, "fitted"], s = st1$stats[1, "se"])
set.seed(125)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(length(a), 0, 1)
LM1 <- lm(b ~ a)
res1 <- lmThresh(LM1, newobs = TRUE)
st1 <- stability(res1, pval = TRUE)
integrate(dt.scaled, lower = st1$stats[1, "lower"], st1$stats[1, "upper"],
df = 18, mu = st1$stats[1, "fitted"], s = st1$stats[1, "se"])
integrate(dt.scaled, lower = st1$stats[1, "eosr.2"], st1$stats[1, "upper"],
df = 18, mu = st1$stats[1, "fitted"], s = st1$stats[1, "se"])
pt.scaled <- function(x, df, mu, s) pt((x - mu)/s, df)
pA <- pt.scaled(x = st1$stats[1, "eosr.2"], df =  18, mu = st1$stats[1, "fitted"],
s = st1$stats[1, "se"])
0.975 - pA
set.seed(123)
a <- 1:20
b <- 5 + 0.08 * a + rnorm(20, 0, 1)
LM1 <- lm(b ~ a)
res1 <- lmMult(LM1)
multPlot(res1)
stability(res1)
library(reverseR)
