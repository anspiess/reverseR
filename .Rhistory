STRETCH <- RLE$lengths[RLE$values == 1]
STRETCH
DICT <- DNAStringSet(KMER[[1]][1:1000000])
PDICT <- PDict(DICT, max.mismatch = 1)
PDICT <- PDict(DICT, max.mismatch = 2)
PDICT <- PDict(DICT, max.mismatch = 1)
gc()
gc()
source("D:/temp/fast kmer genome alignment from scratch.R")
m <- fmatch(KMER[[1]], KMER[[2]])
DIFF <- diff(m)
RLE <- rle(DIFF)
STRETCH <- RLE$lengths[RLE$values == 1]
DICT <- DNAStringSet(KMER[[1]][1:1000000])
PDICT <- PDict(DICT, max.mismatch = 1)
DNA <- DNAString(FASTA[[2]])
m <- matchPDict(PDICT, DNA, max.mismatch = 1)
START <- startIndex(m)
START
HIT <- elementNROWS(m)
HIT
gc()
mm <- 0
DICT <- DNAStringSet(KMER[[1]][1:1000000])
PDICT <- PDict(DICT, max.mismatch = mm)
DNA <- DNAString(FASTA[[2]])
system.time(m <- matchPDict(PDICT, DNA, max.mismatch = mm))
START <- startIndex(m)
END <- endIndex(m)
HIT <- elementNROWS(m)
START
as.list(STARTSTART
)
as.list(START)
HIT
mm <- 1
DICT <- DNAStringSet(KMER[[1]][1:1000000])
PDICT <- PDict(DICT, max.mismatch = mm)
DNA <- DNAString(FASTA[[2]])
system.time(m <- matchPDict(PDICT, DNA, max.mismatch = mm))
START <- startIndex(m)
END <- endIndex(m)
HIT <- elementNROWS(m)
HIT
START
HIT
RLE <- rle(HIT)
STRETCH <- RLE$lengths[RLE$values == 1]
STRETCH
max(STRETCH)
mm <- 0
DICT <- DNAStringSet(KMER[[1]][1:1000000])
PDICT <- PDict(DICT, max.mismatch = mm)
DNA <- DNAString(FASTA[[2]])
system.time(m <- matchPDict(PDICT, DNA, max.mismatch = mm))
START <- startIndex(m)
END <- endIndex(m)
HIT <- elementNROWS(m)
RLE <- rle(HIT)
STRETCH <- RLE$lengths[RLE$values == 1]
max(STRETCH)
as.list(START)
RLE <- rle(START)
START <- as.list(START)
START
which(is.null(START))
lengths(START)
START <- startIndex(m)
lengths(START)
START[lenghts(START) == 0] <- NA
START[lengths(START) == 0] <- NA
START
START <- startIndex(m)
diff(START)
START <- startIndex(m)
START[lengths(START) == 0] <- NA
DIFF <- diff(START)
START
START <- startIndex(m)
START[lengths(START) == 0] <- 0
START
DIFF <- diff(START)
START
table(START)
class(START)
unlist(START)
which(!is.numeric(unlist(START)))
START <- startIndex(m)
START[lengths(START) == 0] <- 0
START <- unlist(START)
START
DIFF <- diff(START)
DIFF
START <- startIndex(m)
START[lengths(START) == 0] <- 0
START <- unlist(START)
DIFF <- diff(START)
RLE <- rle(DIFF)
STRETCH <- RLE$lengths[RLE$values == 1]
STRETCH
max(STRETCH)
RLE
?rle
DIFF
DIFF[DIFF != 1] <- 0
View(as.data.frame(DIFF))
plot(DIFF)
START <- startIndex(m)
START <- startIndex(m)
START[lengths(START) == 0] <- 0
START
START <- startIndex(m)
START[lengths(START) == 0] <- 0
START <- unlist(START)
DIFF <- diff(START)
DIFF[DIFF != 1] <- 0
DIFF
starts <- which(diff(c(0, DIFF)) == 1)   # Start of 1's
ends <- which(diff(c(DIFF, 0)) == -1)    # End of 1's
# Compute lengths of 1's
lengths <- ends - starts + 1
# Combine results into a data frame
islands <- data.frame(start = starts, end = ends, length = lengths)
# Print results
print(islands)
max(lengths)
STARTS
START
m <- fmatch(KMER[[1]], KMER[[2]])
m
source("D:/temp/fast kmer genome alignment from scratch.R")
mm <- 0
DICT <- DNAStringSet(KMER[[1]])
PDICT <- PDict(DICT, max.mismatch = mm)
DNA <- DNAString(FASTA[[2]])
system.time(m <- matchPDict(PDICT, DNA, max.mismatch = mm))
START <- startIndex(m)
END <- endIndex(m)
HIT <- elementNROWS(m)
START[lengths(START) == 0] <- 0
START <- unlist(START)
DIFF <- diff(START)
DIFF[DIFF != 1] <- 0
starts <- which(diff(c(0, DIFF)) == 1)   # Start of 1's
ends <- which(diff(c(DIFF, 0)) == -1)    # End of 1's
lengths <- ends - starts + 1
islands <- data.frame(start = starts, end = ends, length = lengths)
print(islands)
max(islands[, 3])
gc()
mm <- 0
DICT <- DNAStringSet(KMER[[1]])[1:1000000]
source("D:/temp/fast kmer genome alignment from scratch.R")
mm <- 0
DICT <- DNAStringSet(KMER[[1]])[1:1000000]
DICT <- DNAStringSet(KMER[[1]])
subDICT <- DICT[1:1000000]
subDICT
DICT <- DNAStringSet(KMER[[1]])
subDICT <- DICT[1:1000000]
PDICT <- PDict(subDICT, max.mismatch = mm)
DNA <- DNAString(FASTA[[2]])
system.time(m <- matchPDict(PDICT, DNA, max.mismatch = mm))
START <- startIndex(m)
END <- endIndex(m)
HIT <- elementNROWS(m)
START[lengths(START) == 0] <- 0
START <- unlist(START)
DIFF <- diff(START)
DIFF[DIFF != 1] <- 0
starts <- which(diff(c(0, DIFF)) == 1)   # Start of 1's
ends <- which(diff(c(DIFF, 0)) == -1)    # End of 1's
lengths <- ends - starts + 1
islands <- data.frame(start = starts, end = ends, length = lengths)
print(islands)
cut(1:40000000, 20)
?split
CUT <- cut(1:40000000, 20)
length(DICT)
# Define the vector size and chunk size
vector_size <- 47000000
chunk_size <- 1000000
# Generate the vector
vec <- 1:vector_size
# Process the chunks
for (i in seq(1, vector_size, by = chunk_size)) {
# Define the start and end of the chunk
start <- i
end <- min(i + chunk_size - 1, vector_size)
# Extract the chunk
chunk <- vec[start:end]
# Perform your operations on the chunk
# Example: print the chunk's range
print(paste("Processing chunk from", start, "to", end))
}
source("~/.active-rstudio-document")
gc()
source("D:/temp/fast kmer genome alignment from scratch.R")
mm <- 0
DICT <- DNAStringSet(KMER[[1]])
LEN <- length(DICT)
DNA <- DNAString(FASTA[[2]])
LEN <- 1:length(DICT)
LEN
LEN <- length(DICT)
SEQ <- seq(1, LEN, by = CHUNK)
mm <- 0
DICT <- DNAStringSet(KMER[[1]])
LEN <- length(DICT)
VEC <- 1:LEN
DNA <- DNAString(FASTA[[2]])
CHUNK <- 2E6
SEQ <- seq(1, LEN, by = CHUNK)
SEQ
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
print(start)
}
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
print(end)
}
LEN
mm <- 0
DICT <- DNAStringSet(KMER[[1]])
LEN <- length(DICT)
VEC <- 1:LEN
DNA <- DNAString(FASTA[[2]])
CHUNK <- 2E6
SEQ <- seq(1, LEN, by = CHUNK)
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
cat("kmer lookup from", start, ":", end, "\n")
subDICT <- DICT[start:end]
PDICT <- PDict(subDICT, max.mismatch = mm)
system.time(m <- matchPDict(PDICT, DNA, max.mismatch = mm))
START <- startIndex(m)
END <- endIndex(m)
HIT <- elementNROWS(m)
START[lengths(START) == 0] <- 0
START <- unlist(START)
DIFF <- diff(START)
DIFF[DIFF != 1] <- 0
starts <- which(diff(c(0, DIFF)) == 1)   # Start of 1's
ends <- which(diff(c(DIFF, 0)) == -1)    # End of 1's
lengths <- ends - starts + 1
islands <- data.frame(start = starts, end = ends, length = lengths)
}
?signigf
?signif
gc()
source("D:/temp/fast kmer genome alignment from scratch.R")
options(scipen = 999)
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
cat("Kmer lookup", signif(start, digits = 10), ":", signif(end, digits = 10), "\n")
subDICT <- DICT[start:end]
cat("  creating partial dictionary...\n")
PDICT <- PDict(subDICT, max.mismatch = mm)
cat("  matching to template genome...\n")
m <- matchPDict(PDICT, DNA, max.mismatch = mm)
START <- startIndex(m)
END <- endIndex(m)
HIT <- elementNROWS(m)
START[lengths(START) == 0] <- 0
START <- unlist(START)
DIFF <- diff(START)
DIFF[DIFF != 1] <- 0
starts <- which(diff(c(0, DIFF)) == 1)   # Start of 1's
ends <- which(diff(c(DIFF, 0)) == -1)    # End of 1's
lengths <- ends - starts + 1
islands <- data.frame(start = starts, end = ends, length = lengths)
}
?cat
options(scipen = 999)
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
cat("Kmer lookup ", signif(start, digits = 10), ":", signif(end, digits = 10), "\n", sep = "")
subDICT <- DICT[start:end]
cat("  creating partial dictionary...\n")
PDICT <- PDict(subDICT, max.mismatch = mm)
cat("  matching to template genome...\n")
m <- matchPDict(PDICT, DNA, max.mismatch = mm)
START <- startIndex(m)
END <- endIndex(m)
HIT <- elementNROWS(m)
START[lengths(START) == 0] <- 0
START <- unlist(START)
DIFF <- diff(START)
DIFF[DIFF != 1] <- 0
starts <- which(diff(c(0, DIFF)) == 1)   # Start of 1's
ends <- which(diff(c(DIFF, 0)) == -1)    # End of 1's
lengths <- ends - starts + 1
islands <- data.frame(start = starts, end = ends, length = lengths)
}
islands
gc()
source("D:/temp/fast kmer genome alignment from scratch.R")
m <- 0
cat("Creating kmer dictionary...\n")
DICT <- DNAStringSet(KMER[[1]])
LEN <- length(DICT)
VEC <- 1:LEN
cat("Converting template genome to 'DNAString'...\n")
DNA <- DNAString(FASTA[[2]])
CHUNK <- 2E6
SEQ <- seq(1, LEN, by = CHUNK)
mm <- 0
cat("Creating kmer dictionary...\n")
DICT <- DNAStringSet(KMER[[1]])
LEN <- length(DICT)
VEC <- 1:LEN
cat("Converting template genome to 'DNAString'...\n")
DNA <- DNAString(FASTA[[2]])
CHUNK <- 2E6
SEQ <- seq(1, LEN, by = CHUNK)
DICT
as.character(DICT)
KMER[[1]]
m
M
source("D:/temp/fast kmer genome alignment from scratch.R")
gc()
source("D:/temp/fast kmer genome alignment from scratch.R")
source("D:/temp/fast kmer genome alignment from scratch.R")
mm <- 0
cat("Creating kmer dictionary...\n")
DICT <- DNAStringSet(KMER[[1]])
LEN <- length(DICT)
VEC <- 1:LEN
cat("Converting template genome to 'DNAString'...\n")
DNA <- DNAString(FASTA[[2]])
CHUNK <- 2E6
SEQ <- seq(1, LEN, by = CHUNK)
M <- NULL
options(scipen = 999)
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
cat("Kmer lookup ", signif(start, digits = 10), ":", signif(end, digits = 10), "\n", sep = "")
subDICT <- DICT[start:end]
cat("  creating partial dictionary...\n")
PDICT <- PDict(subDICT, max.mismatch = mm)
cat("  matching to template genome...\n")
m <- matchPDict(PDICT, DNA, max.mismatch = mm)
M <- c(M, m)
}
length(DICT)
length(M)
source("D:/temp/fast kmer genome alignment from scratch.R")
START <- startIndex(m)
START
START <- startIndex(m)
END <- endIndex(m)
HIT <- elementNROWS(m)
START[lengths(START) == 0] <- 0
START
START <- unlist(START)
START
STARTS <- NULL
options(scipen = 999)
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
cat("Kmer lookup ", signif(start, digits = 10), ":", signif(end, digits = 10), "\n", sep = "")
subDICT <- DICT[start:end]
cat("  creating partial dictionary...\n")
PDICT <- PDict(subDICT, max.mismatch = mm)
cat("  matching to template genome...\n")
m <- matchPDict(PDICT, DNA, max.mismatch = mm)
START <- startIndex(m)
START[lengths(START) == 0] <- 0
START <- unlist(START)
STARTS <- c(STARTS, START)
}
length(PDICT)
length(KMER[[]]
length(KMER[[1]]
)
length(STARTS)
START
length(m)
m
lengths(m)
which(lengths(m)==2)
sel <- which(lengths(m) > 1)
sel
m
View(as.data.frame(m))
which(lengths(m) == 2)
m[[9358]]
length(m)
length(START)
START
SEQ
STARTS <- NULL
options(scipen = 999)
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
cat("Kmer lookup ", signif(start, digits = 10), ":", signif(end, digits = 10), "\n", sep = "")
subDICT <- DICT[start:end]
cat("  creating partial dictionary...\n")
PDICT <- PDict(subDICT, max.mismatch = mm)
cat("  matching to template genome...\n")
m <- matchPDict(PDICT, DNA, max.mismatch = mm)
sel <- which(lengths(m) > 1)
m[[sel]] <- m[[se]]
START <- startIndex(m)
START[lengths(START) == 0] <- 0
bla()
START <- unlist(START)
STARTS <- c(STARTS, START)
}
STARTS <- NULL
options(scipen = 999)
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
cat("Kmer lookup ", signif(start, digits = 10), ":", signif(end, digits = 10), "\n", sep = "")
subDICT <- DICT[start:end]
cat("  creating partial dictionary...\n")
PDICT <- PDict(subDICT, max.mismatch = mm)
cat("  matching to template genome...\n")
m <- matchPDict(PDICT, DNA, max.mismatch = mm)
sel <- which(lengths(m) > 1)
#m[[sel]] <- m[[se]]
START <- startIndex(m)
START[lengths(START) == 0] <- 0
bla()
START <- unlist(START)
STARTS <- c(STARTS, START)
}
m
length(m)
length(START)
STARTS <- NULL
options(scipen = 999)
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
cat("Kmer lookup ", signif(start, digits = 10), ":", signif(end, digits = 10), "\n", sep = "")
subDICT <- DICT[start:end]
cat("  creating partial dictionary...\n")
PDICT <- PDict(subDICT, max.mismatch = mm)
cat("  matching to template genome...\n")
m <- matchPDict(PDICT, DNA, max.mismatch = mm)
#sel <- which(lengths(m) > 1)
#m[[sel]] <- m[[se]]
START <- startIndex(m)
print(length(m))
print(length(START))
START[lengths(START) == 0] <- 0
START <- unlist(START)
STARTS <- c(STARTS, START)
}
STARTS <- NULL
options(scipen = 999)
for (i in SEQ) {
start <- i
end <- min(i + CHUNK - 1, LEN)
cat("Kmer lookup ", signif(start, digits = 10), ":", signif(end, digits = 10), "\n", sep = "")
subDICT <- DICT[start:end]
cat("  creating partial dictionary...\n")
PDICT <- PDict(subDICT, max.mismatch = mm)
cat("  matching to template genome...\n")
m <- matchPDict(PDICT, DNA, max.mismatch = mm)
#sel <- which(lengths(m) > 1)
#m[[sel]] <- m[[se]]
START <- startIndex(m)
print(length(m))
print(length(START))
bla()
START[lengths(START) == 0] <- 0
START <- unlist(START)
STARTS <- c(STARTS, START)
}
m
length(m)
lengths(m)
which(lengths(m) == 2)
START
length(START)
which(lengths(START) == 2)
START
View(as.data.frame(START))
ls
START
START[lengths(START) == 0] <- 0
START
which(lengths(START) == 2)
START
as.data.frame(START)
as.matrix(START)
nrow(as.matrix(START))
View(as.matrix(START))
which(lengths(START) == 2)
START[[24661]]
library(data.table)
rbindlist(START)
START
class(START)
rbindlist(START)
z <- do.call(START, rbind)
z <- do.call(rbind, START)
library(Rcpp)
gc()
